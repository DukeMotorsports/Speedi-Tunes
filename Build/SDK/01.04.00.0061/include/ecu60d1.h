/* Motec autogenerated header for ecu60d1 */

#include <ecu/types.h>

#define HARDWARE_XML_VERSION 0x010400 /* BCD encoded xml file version */
#define ECU_BOARD 9 /* Unique identifier for ecu60d1 */

#define SYS_CLOCK 125000000

#define SYS_TICK_SHIFT 8

#define TIMER_CLOCK 10416666.666

typedef enum {
#define EQADC_MAGIC ('a'<<8)
	ain_KNOCK1 	= EQADC_MAGIC + 0,
	ain_KNOCK2 	= EQADC_MAGIC + 1,
	ain_DIFF_KNOCK1 	= EQADC_MAGIC + 40,
	ain_INT_G_X 	= EQADC_MAGIC + 4,
	ain_INT_G_Y 	= EQADC_MAGIC + 5,
	ain_INT_G_Z 	= EQADC_MAGIC + 6,
	ain_INT_TEMP 	= EQADC_MAGIC + 8,
	ain_INT_7V0 	= EQADC_MAGIC + 9,
	ain_SEN_6V3 	= EQADC_MAGIC + 10,
	ain_INT_3V3 	= EQADC_MAGIC + 11,
	ain_INT_2V5 	= EQADC_MAGIC + 12,
	ain_INT_1V8 	= EQADC_MAGIC + 13,
	ain_INT_1V5 	= EQADC_MAGIC + 14,
	ain_INT_1V2 	= EQADC_MAGIC + 15,
	ain_INT_HV 	= EQADC_MAGIC + 20,
	ain_INJ_D1A_NEG 	= EQADC_MAGIC + 16,
	ain_INJ_D1B_NEG 	= EQADC_MAGIC + 17,
	ain_INJ_D2A_NEG 	= EQADC_MAGIC + 18,
	ain_INJ_D2B_NEG 	= EQADC_MAGIC + 19,
	ain_OUT_HB1 	= EQADC_MAGIC + 24,
	ain_OUT_HB2 	= EQADC_MAGIC + 25,
	ain_OUT_HB3 	= EQADC_MAGIC + 26,
	ain_OUT_HB4 	= EQADC_MAGIC + 27,
	ain_IGN_LS1 	= EQADC_MAGIC + 28,
	ain_IGN_LS2 	= EQADC_MAGIC + 29,
	ain_IGN_LS3 	= EQADC_MAGIC + 30,
	ain_IGN_LS4 	= EQADC_MAGIC + 31,
	ain_INJ_LS3 	= EQADC_MAGIC + 32,
	ain_INJ_LS4 	= EQADC_MAGIC + 33,
	ain_INJ_LS5 	= EQADC_MAGIC + 34,
	ain_INJ_LS6 	= EQADC_MAGIC + 35,
	ain_OUT_HB5 	= EQADC_MAGIC + 36,
	ain_OUT_HB6 	= EQADC_MAGIC + 37,
	ain_INJ_LS1 	= EQADC_MAGIC + 38,
	ain_INJ_LS2 	= EQADC_MAGIC + 39,
	ain_BRIDGE_1 	= EQADC_MAGIC + 152,
	ain_BRIDGE_2 	= EQADC_MAGIC + 154,
	ain_BRIDGE_3 	= EQADC_MAGIC + 164,
#define AD7490_MAGIC ('b'<<8)
	ain_AT4 	= AD7490_MAGIC + 0,
	ain_AT3 	= AD7490_MAGIC + 1,
	ain_AT2 	= AD7490_MAGIC + 2,
	ain_AT1 	= AD7490_MAGIC + 3,
	ain_AV8 	= AD7490_MAGIC + 4,
	ain_AV7 	= AD7490_MAGIC + 5,
	ain_AV6 	= AD7490_MAGIC + 6,
	ain_AV5 	= AD7490_MAGIC + 7,
	ain_AV4 	= AD7490_MAGIC + 8,
	ain_AV3 	= AD7490_MAGIC + 9,
	ain_AV2 	= AD7490_MAGIC + 10,
	ain_AV1 	= AD7490_MAGIC + 11,
	ain_SEN_5V0_A 	= AD7490_MAGIC + 12,
	ain_SEN_5V0_B 	= AD7490_MAGIC + 13,
	ain_BAT_POS 	= AD7490_MAGIC + 14,
#define TPU_MAGIC ('d'<<8)
	din_UDIG1 	= TPU_MAGIC + 0,
	din_UDIG2 	= TPU_MAGIC + 1,
	din_UDIG3 	= TPU_MAGIC + 2,
	din_UDIG4 	= TPU_MAGIC + 3,
	din_UDIG5 	= TPU_MAGIC + 4,
	din_UDIG6 	= TPU_MAGIC + 5,
	din_UDIG7 	= TPU_MAGIC + 6,
	din_UDIG_PAIR1 	= TPU_MAGIC + 145,
	din_UDIG_PAIR2 	= TPU_MAGIC + 146,
	din_UDIG_PAIR3 	= TPU_MAGIC + 147,
	cfg_UDIG_PAIR1 	= TPU_MAGIC + 151,
	cfg_UDIG_PAIR2 	= TPU_MAGIC + 152,
	cfg_UDIG_PAIR3 	= TPU_MAGIC + 153,
	dout_INJ_D1A_NEG 	= TPU_MAGIC + 15,
	dout_INJ_D1B_NEG 	= TPU_MAGIC + 16,
	dout_INJ_D2A_NEG 	= TPU_MAGIC + 17,
	dout_INJ_D2B_NEG 	= TPU_MAGIC + 18,
	dout_DSP_KNOCK_WINDOW 	= TPU_MAGIC + 29,
	dout_IGN_LS1 	= TPU_MAGIC + 32,
	dout_IGN_LS2 	= TPU_MAGIC + 33,
	dout_IGN_LS3 	= TPU_MAGIC + 34,
	dout_IGN_LS4 	= TPU_MAGIC + 35,
	dout_INJ_LS1 	= TPU_MAGIC + 48,
	dout_INJ_LS2 	= TPU_MAGIC + 49,
	dout_INJ_LS3 	= TPU_MAGIC + 50,
	dout_INJ_LS4 	= TPU_MAGIC + 51,
	dout_INJ_LS5 	= TPU_MAGIC + 52,
	dout_INJ_LS6 	= TPU_MAGIC + 53,
	dout_OUT_HB1 	= TPU_MAGIC + 44,
	dout_OUT_HB2 	= TPU_MAGIC + 46,
	dout_OUT_HB3 	= TPU_MAGIC + 60,
	dout_OUT_HB4 	= TPU_MAGIC + 62,
	dout_OUT_HB5 	= TPU_MAGIC + 40,
	dout_OUT_HB6 	= TPU_MAGIC + 42,
	cfg_UDIG1 	= TPU_MAGIC + 64,
	cfg_UDIG2 	= TPU_MAGIC + 65,
	cfg_UDIG3 	= TPU_MAGIC + 66,
	cfg_UDIG4 	= TPU_MAGIC + 67,
	cfg_UDIG5 	= TPU_MAGIC + 68,
	cfg_UDIG6 	= TPU_MAGIC + 69,
	cfg_UDIG7 	= TPU_MAGIC + 70,
	cfg_INJ_D1A_NEG 	= TPU_MAGIC + 76,
	cfg_INJ_D1B_NEG 	= TPU_MAGIC + 77,
	cfg_INJ_D2A_NEG 	= TPU_MAGIC + 78,
	cfg_INJ_D2B_NEG 	= TPU_MAGIC + 79,
	cfg_IGN_LS_GLOBAL 	= TPU_MAGIC + 88,
	cfg_INJ_D_GLOBAL 	= TPU_MAGIC + 89,
	dout_BRIDGE_1 	= TPU_MAGIC + 91,
	dout_BRIDGE_2 	= TPU_MAGIC + 92,
	dout_BRIDGE_3 	= TPU_MAGIC + 93,
	ain_UDIG1 	= TPU_MAGIC + 99,
	ain_UDIG2 	= TPU_MAGIC + 100,
	ain_UDIG3 	= TPU_MAGIC + 101,
	ain_UDIG4 	= TPU_MAGIC + 102,
	ain_UDIG5 	= TPU_MAGIC + 103,
	ain_UDIG6 	= TPU_MAGIC + 104,
	ain_UDIG7 	= TPU_MAGIC + 105,
	ain_UDIG2A 	= TPU_MAGIC + 117,
	ain_UDIG2B 	= TPU_MAGIC + 118,
	ain_UDIG3A 	= TPU_MAGIC + 119,
	ain_UDIG3B 	= TPU_MAGIC + 120,
	ain_UDIG4A 	= TPU_MAGIC + 121,
	ain_UDIG4B 	= TPU_MAGIC + 122,
	ain_UDIG5A 	= TPU_MAGIC + 123,
	ain_UDIG5B 	= TPU_MAGIC + 124,
	ain_UDIG6A 	= TPU_MAGIC + 125,
	ain_UDIG6B 	= TPU_MAGIC + 126,
	ain_UDIG7A 	= TPU_MAGIC + 127,
	ain_UDIG7B 	= TPU_MAGIC + 128,
	cfg_CAN1 	= TPU_MAGIC + 255,
#define COMMS_MAGIC ('e'<<8)
	ain_CANBLOCK0 	= COMMS_MAGIC + 0,
	ain_CANBLOCK1 	= COMMS_MAGIC + 1,
	ain_CANBLOCK2 	= COMMS_MAGIC + 2,
	ain_CANBLOCK3 	= COMMS_MAGIC + 3,
	ain_CANBLOCK4 	= COMMS_MAGIC + 4,
	ain_CANBLOCK5 	= COMMS_MAGIC + 5,
	ain_CANBLOCK6 	= COMMS_MAGIC + 6,
	ain_CANBLOCK7 	= COMMS_MAGIC + 7,
	ain_CANBLOCK8 	= COMMS_MAGIC + 8,
	ain_CANBLOCK9 	= COMMS_MAGIC + 9,
	ain_CANBLOCK10 	= COMMS_MAGIC + 10,
	ain_CANBLOCK11 	= COMMS_MAGIC + 11,
	ain_CANBLOCK12 	= COMMS_MAGIC + 12,
	ain_CANBLOCK13 	= COMMS_MAGIC + 13,
	ain_CANBLOCK14 	= COMMS_MAGIC + 14,
	ain_CANBLOCK15 	= COMMS_MAGIC + 15,
	ain_CANBLOCK16 	= COMMS_MAGIC + 16,
	ain_CANBLOCK17 	= COMMS_MAGIC + 17,
	ain_CANBLOCK18 	= COMMS_MAGIC + 18,
	ain_CANBLOCK19 	= COMMS_MAGIC + 19,
	ain_CANBLOCK20 	= COMMS_MAGIC + 20,
	ain_CANBLOCK21 	= COMMS_MAGIC + 21,
	ain_CANBLOCK22 	= COMMS_MAGIC + 22,
	ain_CANBLOCK23 	= COMMS_MAGIC + 23,
	ain_CANBLOCK24 	= COMMS_MAGIC + 24,
	ain_CANBLOCK25 	= COMMS_MAGIC + 25,
	ain_CANBLOCK26 	= COMMS_MAGIC + 26,
	ain_CANBLOCK27 	= COMMS_MAGIC + 27,
	ain_CANBLOCK28 	= COMMS_MAGIC + 28,
	ain_CANBLOCK29 	= COMMS_MAGIC + 29,
	ain_CANBLOCK30 	= COMMS_MAGIC + 30,
	ain_CANBLOCK31 	= COMMS_MAGIC + 31,
	ain_FIRMWARE0 	= COMMS_MAGIC + 32,
	ain_FIRMWARE1 	= COMMS_MAGIC + 33,
	ain_FIRMWARE2 	= COMMS_MAGIC + 34,
	ain_FIRMWARE3 	= COMMS_MAGIC + 35,
	ain_FIRMWARE4 	= COMMS_MAGIC + 36,
	ain_FIRMWARE5 	= COMMS_MAGIC + 37,
	ain_FIRMWARE6 	= COMMS_MAGIC + 38,
	ain_FIRMWARE7 	= COMMS_MAGIC + 39,
	ain_FIRMWARE8 	= COMMS_MAGIC + 40,
	ain_FIRMWARE9 	= COMMS_MAGIC + 41,
	ain_FIRMWARE10 	= COMMS_MAGIC + 42,
	ain_FIRMWARE11 	= COMMS_MAGIC + 43,
	ain_FIRMWARE12 	= COMMS_MAGIC + 44,
	ain_FIRMWARE13 	= COMMS_MAGIC + 45,
	ain_FIRMWARE14 	= COMMS_MAGIC + 46,
	ain_FIRMWARE15 	= COMMS_MAGIC + 47,
	ain_FIRMWARE16 	= COMMS_MAGIC + 48,
	ain_FIRMWARE17 	= COMMS_MAGIC + 49,
	ain_FIRMWARE18 	= COMMS_MAGIC + 50,
	ain_FIRMWARE19 	= COMMS_MAGIC + 51,
	ain_FIRMWARE20 	= COMMS_MAGIC + 52,
	ain_FIRMWARE21 	= COMMS_MAGIC + 53,
	ain_FIRMWARE22 	= COMMS_MAGIC + 54,
	ain_FIRMWARE23 	= COMMS_MAGIC + 55,
	ain_FIRMWARE24 	= COMMS_MAGIC + 56,
	ain_FIRMWARE25 	= COMMS_MAGIC + 57,
	ain_FIRMWARE26 	= COMMS_MAGIC + 58,
	ain_FIRMWARE27 	= COMMS_MAGIC + 59,
	ain_FIRMWARE28 	= COMMS_MAGIC + 60,
	ain_FIRMWARE29 	= COMMS_MAGIC + 61,
	ain_FIRMWARE30 	= COMMS_MAGIC + 62,
	ain_FIRMWARE31 	= COMMS_MAGIC + 63,
	ain_E8XX0 	= COMMS_MAGIC + 64,
	ain_E8XX1 	= COMMS_MAGIC + 65,
	ain_E8XX2 	= COMMS_MAGIC + 66,
	ain_E8XX3 	= COMMS_MAGIC + 67,
	ain_E8XX4 	= COMMS_MAGIC + 68,
	ain_E8XX5 	= COMMS_MAGIC + 69,
	ain_E8XX6 	= COMMS_MAGIC + 70,
	ain_E8XX7 	= COMMS_MAGIC + 71,
	ain_E8XX8 	= COMMS_MAGIC + 72,
	ain_E8XX9 	= COMMS_MAGIC + 73,
	ain_E8XX10 	= COMMS_MAGIC + 74,
	ain_E8XX11 	= COMMS_MAGIC + 75,
	ain_E8XX12 	= COMMS_MAGIC + 76,
	ain_E8XX13 	= COMMS_MAGIC + 77,
	ain_E8XX16 	= COMMS_MAGIC + 80,
	ain_E8XX17 	= COMMS_MAGIC + 81,
	ain_E8XX20 	= COMMS_MAGIC + 84,
	ain_E8XX21 	= COMMS_MAGIC + 85,
	ain_E8XX22 	= COMMS_MAGIC + 86,
	ain_E8XX23 	= COMMS_MAGIC + 87,
	ain_E8XX24 	= COMMS_MAGIC + 88,
	ain_E8XX25 	= COMMS_MAGIC + 89,
	din_CANBLOCK0 	= COMMS_MAGIC + 128,
	din_CANBLOCK1 	= COMMS_MAGIC + 129,
	din_CANBLOCK2 	= COMMS_MAGIC + 130,
	din_CANBLOCK3 	= COMMS_MAGIC + 131,
	din_CANBLOCK4 	= COMMS_MAGIC + 132,
	din_CANBLOCK5 	= COMMS_MAGIC + 133,
	din_CANBLOCK6 	= COMMS_MAGIC + 134,
	din_CANBLOCK7 	= COMMS_MAGIC + 135,
	din_CANBLOCK8 	= COMMS_MAGIC + 136,
	din_CANBLOCK9 	= COMMS_MAGIC + 137,
	din_CANBLOCK10 	= COMMS_MAGIC + 138,
	din_CANBLOCK11 	= COMMS_MAGIC + 139,
	din_CANBLOCK12 	= COMMS_MAGIC + 140,
	din_CANBLOCK13 	= COMMS_MAGIC + 141,
	din_CANBLOCK14 	= COMMS_MAGIC + 142,
	din_CANBLOCK15 	= COMMS_MAGIC + 143,
	din_CANBLOCK16 	= COMMS_MAGIC + 144,
	din_CANBLOCK17 	= COMMS_MAGIC + 145,
	din_CANBLOCK18 	= COMMS_MAGIC + 146,
	din_CANBLOCK19 	= COMMS_MAGIC + 147,
	din_CANBLOCK20 	= COMMS_MAGIC + 148,
	din_CANBLOCK21 	= COMMS_MAGIC + 149,
	din_CANBLOCK22 	= COMMS_MAGIC + 150,
	din_CANBLOCK23 	= COMMS_MAGIC + 151,
	din_CANBLOCK24 	= COMMS_MAGIC + 152,
	din_CANBLOCK25 	= COMMS_MAGIC + 153,
	din_CANBLOCK26 	= COMMS_MAGIC + 154,
	din_CANBLOCK27 	= COMMS_MAGIC + 155,
	din_CANBLOCK28 	= COMMS_MAGIC + 156,
	din_CANBLOCK29 	= COMMS_MAGIC + 157,
	din_CANBLOCK30 	= COMMS_MAGIC + 158,
	din_CANBLOCK31 	= COMMS_MAGIC + 159,
	din_FIRMWARE0 	= COMMS_MAGIC + 160,
	din_FIRMWARE1 	= COMMS_MAGIC + 161,
	din_FIRMWARE2 	= COMMS_MAGIC + 162,
	din_FIRMWARE3 	= COMMS_MAGIC + 163,
	din_FIRMWARE4 	= COMMS_MAGIC + 164,
	din_FIRMWARE5 	= COMMS_MAGIC + 165,
	din_FIRMWARE6 	= COMMS_MAGIC + 166,
	din_FIRMWARE7 	= COMMS_MAGIC + 167,
	din_FIRMWARE8 	= COMMS_MAGIC + 168,
	din_FIRMWARE9 	= COMMS_MAGIC + 169,
	din_FIRMWARE10 	= COMMS_MAGIC + 170,
	din_FIRMWARE11 	= COMMS_MAGIC + 171,
	din_FIRMWARE12 	= COMMS_MAGIC + 172,
	din_FIRMWARE13 	= COMMS_MAGIC + 173,
	din_FIRMWARE14 	= COMMS_MAGIC + 174,
	din_FIRMWARE15 	= COMMS_MAGIC + 175,
	din_FIRMWARE16 	= COMMS_MAGIC + 176,
	din_FIRMWARE17 	= COMMS_MAGIC + 177,
	din_FIRMWARE18 	= COMMS_MAGIC + 178,
	din_FIRMWARE19 	= COMMS_MAGIC + 179,
	din_FIRMWARE20 	= COMMS_MAGIC + 180,
	din_FIRMWARE21 	= COMMS_MAGIC + 181,
	din_FIRMWARE22 	= COMMS_MAGIC + 182,
	din_FIRMWARE23 	= COMMS_MAGIC + 183,
	din_FIRMWARE24 	= COMMS_MAGIC + 184,
	din_FIRMWARE25 	= COMMS_MAGIC + 185,
	din_FIRMWARE26 	= COMMS_MAGIC + 186,
	din_FIRMWARE27 	= COMMS_MAGIC + 187,
	din_FIRMWARE28 	= COMMS_MAGIC + 188,
	din_FIRMWARE29 	= COMMS_MAGIC + 189,
	din_FIRMWARE30 	= COMMS_MAGIC + 190,
	din_FIRMWARE31 	= COMMS_MAGIC + 191,
	din_E8XX14 	= COMMS_MAGIC + 206,
	din_E8XX15 	= COMMS_MAGIC + 207,
	din_E8XX18 	= COMMS_MAGIC + 210,
	din_E8XX19 	= COMMS_MAGIC + 211,
	dout_PDM_OUT0 	= COMMS_MAGIC + 96,
	dout_PDM_OUT1 	= COMMS_MAGIC + 97,
	dout_PDM_OUT2 	= COMMS_MAGIC + 98,
	dout_PDM_OUT3 	= COMMS_MAGIC + 99,
	dout_PDM_OUT4 	= COMMS_MAGIC + 100,
	dout_PDM_OUT5 	= COMMS_MAGIC + 101,
	dout_PDM_OUT6 	= COMMS_MAGIC + 102,
	dout_PDM_OUT7 	= COMMS_MAGIC + 103,
	dout_PDM_OUT8 	= COMMS_MAGIC + 104,
	dout_PDM_OUT9 	= COMMS_MAGIC + 105,
	dout_PDM_OUT10 	= COMMS_MAGIC + 106,
	dout_PDM_OUT11 	= COMMS_MAGIC + 107,
	dout_PDM_OUT12 	= COMMS_MAGIC + 108,
	dout_PDM_OUT13 	= COMMS_MAGIC + 109,
	dout_PDM_OUT14 	= COMMS_MAGIC + 110,
	dout_PDM_OUT15 	= COMMS_MAGIC + 111,
	dout_PDM_OUT16 	= COMMS_MAGIC + 112,
	dout_PDM_OUT17 	= COMMS_MAGIC + 113,
	dout_PDM_OUT18 	= COMMS_MAGIC + 114,
	dout_PDM_OUT19 	= COMMS_MAGIC + 115,
	dout_PDM_OUT20 	= COMMS_MAGIC + 116,
	dout_PDM_OUT21 	= COMMS_MAGIC + 117,
	dout_PDM_OUT22 	= COMMS_MAGIC + 118,
	dout_PDM_OUT23 	= COMMS_MAGIC + 119,
	dout_E8XX_OUT1 	= COMMS_MAGIC + 120,
	dout_E8XX_OUT2 	= COMMS_MAGIC + 121,
	dout_E8XX_OUT3 	= COMMS_MAGIC + 122,
	dout_E8XX_OUT4 	= COMMS_MAGIC + 123,
	dout_E8XX_OUT5 	= COMMS_MAGIC + 124,
	dout_E8XX_OUT6 	= COMMS_MAGIC + 125,
	dout_E8XX_OUT7 	= COMMS_MAGIC + 126,
	dout_E8XX_OUT8 	= COMMS_MAGIC + 127,
} enum_io;

typedef s32 handle_t;
static __inline bool handle_active(handle_t handle)
{
	return (handle > 0);
}

typedef enum {
	PERIODIC_STATE_OFF = 0,
	PERIODIC_STATE_ON = 1
} enum_periodic_state;

typedef enum {
	PERIODIC_SLAVE_NONE = 0,
	PERIODIC_SLAVE_INJ_D1A = 15,
	PERIODIC_SLAVE_INJ_D1B = 16,
	PERIODIC_SLAVE_INJ_D2A = 17,
	PERIODIC_SLAVE_INJ_D2B = 18,
	PERIODIC_SLAVE_IGN_LS1 = 48,
	PERIODIC_SLAVE_IGN_LS2 = 49,
	PERIODIC_SLAVE_IGN_LS3 = 50,
	PERIODIC_SLAVE_IGN_LS4 = 51,
	PERIODIC_SLAVE_INJ_LS1 = 33,
	PERIODIC_SLAVE_INJ_LS2 = 34,
	PERIODIC_SLAVE_INJ_LS3 = 35,
	PERIODIC_SLAVE_INJ_LS4 = 36,
	PERIODIC_SLAVE_INJ_LS5 = 37,
	PERIODIC_SLAVE_INJ_LS6 = 38,
	PERIODIC_SLAVE_OUT_HB1 = 44,
	PERIODIC_SLAVE_OUT_HB2 = 46,
	PERIODIC_SLAVE_OUT_HB3 = 60,
	PERIODIC_SLAVE_OUT_HB4 = 62
} enum_periodic_slave;

typedef enum {
	PERIODIC_DIAGNOSTIC_SLAVE_INVALID = -3,
	PERIODIC_DIAGNOSTIC_SAMPLE_TEETH_INVALID = -2,
	PERIODIC_DIAGNOSTIC_COMMS_TIMEOUT = -1,
	PERIODIC_DIAGNOSTIC_NA = 0,
	PERIODIC_DIAGNOSTIC_OK = 1
} enum_periodic_diagnostic;

typedef enum {
	REF_MODE_2REV_MULTI = 0,
	REF_MODE_2REV_MINUS_1 = 1,
	REF_MODE_2REV_MINUS_2 = 2,
	REF_MODE_CAM_MINUS_1 = 3,
	REF_MODE_CAM_MINUS_2 = 4,
	REF_MODE_1REV_MULTI = 5,
	REF_MODE_1REV_MINUS_1 = 6,
	REF_MODE_1REV_MINUS_2 = 7,
	REF_MODE_DENSO_270_90 = 8,
	REF_MODE_HONDA_BIKE = 9,
	REF_MODE_FORD_BA = 10,
	REF_MODE_LS7 = 11,
	REF_MODE_RB26 = 12,
	REF_MODE_SR20 = 13,
	REF_MODE_RB30 = 14,
	REF_MODE_BOSCH_140_40 = 15,
	REF_MODE_EJ20G = 16,
	REF_MODE_HONDA_K20A = 17,
	REF_MODE_TWINAIR = 18,
	REF_MODE_VQ35 = 19,
	REF_MODE_BMW_N55 = 20,
	REF_MODE_SGL12A = 21,
	REF_MODE_EJ207 = 22,
	REF_MODE_FORD_COYOTE = 24,
	REF_MODE_PSA_EP6DTS = 25,
	REF_MODE_FX_SHO = 26,
	REF_MODE_FA20D = 27,
	REF_MODE_4G63T = 28,
	REF_MODE_SCANIA_DC16 = 29,
	REF_MODE_CUSTOM_EJ20G = 30,
	REF_MODE_BMW_S62 = 31,
	REF_MODE_LAMBORGHINI_V10 = 32,
	REF_MODE_VIPER = 33,
	REF_MODE_VIPER_MY08 = 34,
	REF_MODE_6A12 = 35,
	REF_MODE_VK56DE = 36,
	REF_MODE_TOYOTA_2ZZ = 37,
	REF_MODE_SUBARU_FA20DIT = 38,
	REF_MODE_TOYOTA_2JZ_GE = 39,
	REF_MODE_MAZDA_RX8 = 40,
	REF_MODE_MITSUBISHI_4B11 = 41,
	REF_MODE_TOYOTA_1FZ_FE = 42,
	REF_MODE_MAZDA_L3 = 43,
	REF_MODE_BMW_S85 = 44,
	REF_MODE_TOYOTA_2GR_FE = 45,
	REF_MODE_VOLVO_D11C = 46,
	REF_MODE_NISSAN_VK50VE = 47,
	REF_MODE_FORD_WINDSOR = 48,
	REF_MODE_HONDA_F20C = 49,
	REF_MODE_CHRYSLER_SRT8_2005 = 50,
	REF_MODE_CHRYSLER_SRT8_2011 = 51,
	REF_MODE_FORD_SIGMA_TIVCT = 52,
	REF_MODE_GM_DMAX_LMM = 53,
	REF_MODE_MMC_FUSO_4P10 = 54,
	REF_MODE_HMC_GAMMA = 55,
	REF_MODE_GASTECH_TX1 = 56,
	REF_MODE_PRIVATE_1 = 57,
	REF_MODE_BOSCH_60_120_180 = 58,
	REF_MODE_MAZDA_MX5_2006 = 59,
	REF_MODE_BMW_M54 = 60,
	REF_MODE_GASTECH_TX2 = 61,
	REF_MODE_PORSCHE_997 = 62,
	REF_MODE_TOYOTA_2UR_GSE = 63,
	REF_MODE_HMC_LAMBDA2 = 64,
	REF_MODE_BMW_S50 = 65,
	REF_MODE_MMC_FUSO_6M60 = 66,
	REF_MODE_TOYOTA_1UZ_FE = 67,
	REF_MODE_GM_LS1 = 68,
	REF_MODE_MAZDA_PY01 = 69,
	REF_MODE_HONDA_K20C1 = 70,
	REF_MODE_MB_M120 = 71,
	REF_MODE_SUBARU_EZ30 = 72,
	REF_MODE_CAT_C15_CAM = 73,
	REF_MODE_CAT_C175 = 74,
	REF_MODE_GM_LT5 = 75,
	REF_MODE_DENSO_270_90_MAG = 76,
	REF_MODE_ISUZU_4P150 = 77,
	REF_MODE_BOSCH_140_40_360 = 78,
	REF_MODE_CAT_24P15 = 79,
	REF_MODE_1REV_12P15 = 80,
	REF_MODE_KIA_G4TH = 81,
	REF_MODE_TOYOTA_1KD_FTV = 82,
	REF_MODE_TOYOTA_1GD_FTV = 83,
	REF_MODE_MERCURY_1075 = 84,
	REF_MODE_VOLVO_B4204T9 = 85,
	REF_MODE_HONDA_K24Z7 = 86,
	REF_MODE_ASTON_MARTIN_AJ37 = 87,
	REF_MODE_CHRYSLER_PENTASTAR = 88,
	REF_MODE_NISSAN_YS23DDT = 89,
	REF_MODE_VW_EA189 = 90,
	REF_MODE_COSWORTH_YB = 91,
	REF_MODE_VOLVO_B5244S = 92,
	REF_MODE_VQ35_18M2 = 93,
	REF_MODE_LAMBORGHINI_LP520 = 94,
	REF_MODE_MTU_20V4000 = 95,
	REF_MODE_CAT_C18 = 96,
	REF_MODE_ROVER_K_SERIES = 97,
	REF_MODE_HONDA_L15B7 = 98,
	REF_MODE_BOSCH_140_40_36M1 = 99,
	REF_MODE_HONDA_J35A = 100,
	REF_MODE_SUZUKI_K6A = 101,
	REF_MODE_GIBSON_ZA348 = 102,
	REF_MODE_NISSAN_MR16DDT = 103,
	REF_MODE_HONDA_CBR250RR = 104,
	REF_MODE_FORD_COYOTE_GEN3 = 105,
	REF_MODE_GM_ABITS = 106
} enum_ref_mode;

typedef enum {
	REF_STATE_OPEN = 0,
	REF_STATE_INIT = 1,
	REF_STATE_STALL = 2,
	REF_STATE_FIRST_EDGE = 3,
	REF_STATE_FIRST_PERIOD = 4,
	REF_STATE_SEARCH = 5,
	REF_STATE_SEG_LOCK = 6,
	REF_STATE_CYCLE_LOCK = 7,
	REF_STATE_ERROR = 8,
	REF_STATE_EXIT = 9,
	REF_STATE_TEST = 10
} enum_ref_state;

typedef enum {
	REF_DIAGNOSTIC_NA = 0,
	REF_DIAGNOSTIC_OK = 1,
	REF_DIAGNOSTIC_MISSING = 2,
	REF_DIAGNOSTIC_RESYNC = 3,
	REF_DIAGNOSTIC_RATIO_HI = 4,
	REF_DIAGNOSTIC_RATIO_LO = 5,
	REF_DIAGNOSTIC_RESTART = 6,
	REF_DIAGNOSTIC_SKIP = 7,
	REF_DIAGNOSTIC_PHASE = 8,
	REF_DIAGNOSTIC_TIMEOUT = 9,
	REF_DIAGNOSTIC_TEST = 10,
	REF_DIAGNOSTIC_MODE_INVALID = 11,
	REF_DIAGNOSTIC_MODE_EXPERIMENTAL = 12,
	REF_DIAGNOSTIC_TOOTH_COUNT_INVALID = 13,
	REF_DIAGNOSTIC_SPEED_MAX_INVALID = 14,
	REF_DIAGNOSTIC_TOOTH_RATIO_LO_INVALID = 15,
	REF_DIAGNOSTIC_TOOTH_RATIO_HI_INVALID = 16,
	REF_DIAGNOSTIC_OFFSET_INVALID = 17,
	REF_DIAGNOSTIC_ALT_OFFSET_INVALID = 18,
	REF_DIAGNOSTIC_BLANK_RATIO_INVALID = 19
} enum_ref_diagnostic;

typedef enum {
	DECODE_CFG_FREQ_DUTY = 0,
	DECODE_CFG_SENT_TPS = 1,
	DECODE_CFG_FREQ_WIDTH = 2,
	DECODE_CFG_SENT_PPX = 3,
	DECODE_CFG_HELLA_OPST = 4,
	DECODE_CFG_HELLA_PULS = 5,
	DECODE_CFG_SENT_SSX = 6
} enum_decode_cfg;

typedef enum {
	DECODE_DIAGNOSTIC_NA = 0,
	DECODE_DIAGNOSTIC_OK = 1,
	DECODE_DIAGNOSTIC_TIMEOUT = 2,
	DECODE_DIAGNOSTIC_SEARCH = 3,
	DECODE_DIAGNOSTIC_NOISE = 4,
	DECODE_DIAGNOSTIC_CAL_TOLERANCE = 5,
	DECODE_DIAGNOSTIC_CAL_DELTA = 6,
	DECODE_DIAGNOSTIC_NIBBLES = 7,
	DECODE_DIAGNOSTIC_BAD_DATA = 8,
	DECODE_DIAGNOSTIC_CRC = 9,
	DECODE_DIAGNOSTIC_ERROR = 10,
	DECODE_DIAGNOSTIC_RES_UNUSED = 11,
	DECODE_DIAGNOSTIC_SERIAL_FMT = 12,
	DECODE_DIAGNOSTIC_SERIAL_CRC = 13,
	DECODE_DIAGNOSTIC_FAST1_ERROR = 14,
	DECODE_DIAGNOSTIC_FAST2_ERROR = 15,
	DECODE_DIAGNOSTIC_SECURE_ERROR = 16
} enum_decode_diagnostic;

typedef enum {
	INCDECODE_MODE_NORMAL = 0,
	INCDECODE_MODE_FORCE_HOME_LOW = 1,
	INCDECODE_MODE_FORCE_HOME_HIGH = 2
} enum_incdecode_mode;

typedef enum {
	INCDECODE_DIAGNOSTIC_NA = 0,
	INCDECODE_DIAGNOSTIC_OK = 1,
	INCDECODE_DIAGNOSTIC_PULSES_PER_REV_INVALID = 2,
	INCDECODE_DIAGNOSTIC_HOME_HIGH_INVALID = 3
} enum_incdecode_diagnostic;

typedef enum {
	SYNC_CFG_POSITION_BOTH = -2,
	SYNC_CFG_POSITION = -1,
	SYNC_CFG_SYNCHRONISATION = 0,
	SYNC_CFG_BANK_1_INLET = 1,
	SYNC_CFG_BANK_1_EXHAUST = 2,
	SYNC_CFG_BANK_2_INLET = 3,
	SYNC_CFG_BANK_2_EXHAUST = 4,
	SYNC_CFG_REDUCTION = 5
} enum_sync_cfg;

typedef enum {
	SYNC_DIAGNOSTIC_NA = 0,
	SYNC_DIAGNOSTIC_OK = 1,
	SYNC_DIAGNOSTIC_SEARCH = 2,
	SYNC_DIAGNOSTIC_BAD_PITCH = 3,
	SYNC_DIAGNOSTIC_BAD_SENSOR = 4,
	SYNC_DIAGNOSTIC_MISSING = 5,
	SYNC_DIAGNOSTIC_INVALID_CAMSHAFT = 6,
	SYNC_DIAGNOSTIC_DISABLED = 7
} enum_sync_diagnostic;

typedef enum {
	CAM_MODE_DISABLED = 0,
	CAM_MODE_ENABLED = 1
} enum_cam_mode;

typedef enum {
	DIG_TEST_NA = 0,
	DIG_TEST_PENDING = 1,
	DIG_TEST_RUN = 2,
	DIG_TEST_DONE = 3
} enum_dig_test;

typedef enum {
	DIG_STATE_OFF = 0,
	DIG_STATE_ON = 1
} enum_dig_state;

typedef enum {
	ALTREF_MODE_MONITOR = 0,
	ALTREF_MODE_ACTIVE = 1
} enum_altref_mode;

typedef enum {
	PULSE_CFG_EDGE_MASK = 1,
	PULSE_CFG_EDGE_START = 0,
	PULSE_CFG_EDGE_END = 1,
	PULSE_CFG_ANGLE_MASK = 6,
	PULSE_CFG_ANGLE_CENTRED = 0,
	PULSE_CFG_ANGLE_BEFORE = 2,
	PULSE_CFG_ANGLE_AFTER = 4
} enum_pulse_cfg;

typedef enum {
	PORT_CFG_MODE_MASK = 1,
	PORT_CFG_END_ANGLE = 0,
	PORT_CFG_START_ANGLE = 1,
	PORT_CFG_POLARITY_MASK = 4,
	PORT_CFG_POLARITY_NORMAL = 0,
	PORT_CFG_POLARITY_INVERTING = 4
} enum_port_cfg;

typedef enum {
	PORT_PIN_DRIVE_ENABLE_MASK = 1,
	PORT_PIN_DRIVE_ENABLE_DISABLED = 0,
	PORT_PIN_DRIVE_ENABLE_ENABLED = 1,
	PORT_PIN_DRIVE_TEST_MASK = 2,
	PORT_PIN_DRIVE_TEST_DISABLED = 0,
	PORT_PIN_DRIVE_TEST_ENABLED = 2
} enum_port_pin_drive;

typedef enum {
	PORT_STATUS_NA = 0,
	PORT_STATUS_OK = 1,
	PORT_STATUS_PULSE_OFF = 2,
	PORT_STATUS_PULSE_SKIP = 3,
	PORT_STATUS_PULSE_LIMIT = 4,
	PORT_STATUS_DUTY_MAX = 5,
	PORT_STATUS_CUT = 6,
	PORT_STATUS_START = 7,
	PORT_STATUS_TEST = 8,
	PORT_STATUS_ERROR = 9,
	PORT_STATUS_PULSE_VOLUME_MAX = 10,
	PORT_STATUS_PULSE_WIDTH_MAX = 11,
	PORT_STATUS_OFF_TIME_MAX = 12,
	PORT_STATUS_OUTPUT_DELAY_MAX = 13,
	PORT_STATUS_PULSE_ANGLE_INVALID = 14,
	PORT_STATUS_LIMIT_ANGLE_INVALID = 16,
	PORT_STATUS_TDC_INVALID = 18
} enum_port_status;

typedef enum {
	IGN_CFG_EDGE_MASK = 1,
	IGN_CFG_EDGE_FALL = 0,
	IGN_CFG_EDGE_RISE = 1
} enum_ign_cfg;

typedef enum {
	IGN_PIN_DRIVE_ENABLE_MASK = 1,
	IGN_PIN_DRIVE_ENABLE_DISABLED = 0,
	IGN_PIN_DRIVE_ENABLE_ENABLED = 1,
	IGN_PIN_DRIVE_TEST_MASK = 2,
	IGN_PIN_DRIVE_TEST_DISABLED = 0,
	IGN_PIN_DRIVE_TEST_ENABLED = 2
} enum_ign_pin_drive;

typedef enum {
	IGN_STATUS_SHARED = -1,
	IGN_STATUS_NA = 0,
	IGN_STATUS_OK = 1,
	IGN_STATUS_CHARGE_MIN = 2,
	IGN_STATUS_CHARGE_MAX = 3,
	IGN_STATUS_CHARGE_SKIP = 4,
	IGN_STATUS_IGN_CUT = 5,
	IGN_STATUS_IGN_OFF = 6,
	IGN_STATUS_START = 7,
	IGN_STATUS_TEST = 8,
	IGN_STATUS_ERROR = 9,
	IGN_STATUS_TDC_INVALID = 10,
	IGN_STATUS_TIMING_INVALID = 11,
	IGN_STATUS_CFG_INVALID = 12,
	IGN_STATUS_RESTRIKES_MAX_INVALID = 13,
	IGN_STATUS_RESTRIKE_ANGLE_INVALID = 14
} enum_ign_status;

typedef enum {
	KNOCK_DIAG_NA = 0,
	KNOCK_DIAG_OK = 1,
	KNOCK_DIAG_START = 2,
	KNOCK_DIAG_ERROR = 3,
	KNOCK_DIAG_WINDOW_IO_INVALID = 4,
	KNOCK_DIAG_LEVEL_IO_INVALID = 5,
	KNOCK_DIAG_TDC_INVALID = 6,
	KNOCK_DIAG_WINDOW_START_INVALID = 7,
	KNOCK_DIAG_WINDOW_WIDTH_INVALID = 8,
	KNOCK_DIAG_FREQ_INVALID = 9,
	KNOCK_DIAG_GAIN_INVALID = 10
} enum_knock_diag;

typedef enum {
	INJ_PH_TEST_NA = 0,
	INJ_PH_TEST_PENDING = 1,
	INJ_PH_TEST_RUN = 2,
	INJ_PH_TEST_DONE = 3
} enum_inj_ph_test;

typedef enum {
	INJ_D_TEST_NA = 0,
	INJ_D_TEST_PENDING = 1,
	INJ_D_TEST_RUN = 2,
	INJ_D_TEST_DONE = 3,
	INJ_D_TEST_DISCHARGE = 4
} enum_inj_d_test;

typedef enum {
	CP_MODE_PWM_MASK = 1,
	CP_MODE_PWM_DISABLED = 0,
	CP_MODE_PWM_ENABLED = 1,
	CP_MODE_DELIVERY_MASK = 2,
	CP_MODE_DELIVERY_DISABLED = 2,
	CP_MODE_DELIVERY_ENABLED = 0,
	CP_MODE_TEST_MASK = 4,
	CP_MODE_TEST_DISABLED = 0,
	CP_MODE_TEST_ENABLED = 4
} enum_cp_mode;

typedef enum {
	CAM_CFG_PHASE_MASK = 15,
	CAM_CFG_CRANKSHAFT = 0,
	CAM_CFG_BANK_1_INLET = 1,
	CAM_CFG_BANK_1_EXHAUST = 2,
	CAM_CFG_BANK_2_INLET = 3,
	CAM_CFG_BANK_2_EXHAUST = 4,
	CAM_CFG_REDUCTION = 5,
	CAM_CFG_POLARITY_MASK = 16,
	CAM_CFG_POLARITY_NORMAL = 0,
	CAM_CFG_POLARITY_INVERTING = 16,
	CAM_CFG_TYPE_MASK = 32,
	CAM_CFG_TYPE_NOPEN = 0,
	CAM_CFG_TYPE_NCLOSED = 32
} enum_cam_cfg;

typedef enum {
	CAMPUMP_DIAG_NA = 0,
	CAMPUMP_DIAG_OK = 1,
	CAMPUMP_DIAG_PULSE_OFF = 2,
	CAMPUMP_DIAG_PULSE_SKIP = 3,
	CAMPUMP_DIAG_PEAK_LIMIT = 4,
	CAMPUMP_DIAG_PWM = 5,
	CAMPUMP_DIAG_START = 6,
	CAMPUMP_DIAG_TEST = 7,
	CAMPUMP_DIAG_ERROR = 8,
	CAMPUMP_DIAG_WAIT = 9,
	CAMPUMP_DIAG_PWM_TIMEOUT_INVALID = 10,
	CAMPUMP_DIAG_CAM_LOBE_PITCH_INVALID = 11,
	CAMPUMP_DIAG_CAM_PHASE_SOURCE_INVALID = 12,
	CAMPUMP_DIAG_LIMIT_ANGLE_INVALID = 13,
	CAMPUMP_DIAG_DELIVERY_ANGLE_INVALID = 14,
	CAMPUMP_DIAG_HOLD_ANGLE_INVALID = 15,
	CAMPUMP_DIAG_PEAK_PULSE_INVALID = 16,
	CAMPUMP_DIAG_HOLD_FREQ_INVALID = 17,
	CAMPUMP_DIAG_HOLD_DUTY_INVALID = 18,
	CAMPUMP_DIAG_OFFSET_INVALID = 19,
	CAMPUMP_DIAG_OFF_DELAY_INVALID = 20,
	CAMPUMP_DIAG_CAM_LOBE_COUNT_INVALID = 21
} enum_campump_diag;

typedef enum {
	SLAVE_MODE_OFF = -1,
	SLAVE_MODE_MASTER = 0,
	SLAVE_MODE_ACTIVE = 1
} enum_slave_mode;

typedef enum {
	RATIO_REF_ABSOLUTE = 0,
	RATIO_REF_SEN_5V0_A = 1,
	RATIO_REF_SEN_5V0_B = 2,
	RATIO_REF_INT_3V3 = 3
} enum_ratio_ref;

typedef enum {
	AV_OUT_NONE = -1,
	AV_OUT_OUT_HB1 = 44,
	AV_OUT_OUT_HB2 = 46,
	AV_OUT_OUT_HB3 = 60,
	AV_OUT_OUT_HB4 = 62,
	AV_OUT_OUT_HB5 = 40,
	AV_OUT_OUT_HB6 = 42,
	AV_OUT_OUT_LS1 = 48,
	AV_OUT_OUT_LS2 = 49,
	AV_OUT_OUT_LS3 = 50,
	AV_OUT_OUT_LS4 = 51,
	AV_OUT_OUT_LS5 = 52,
	AV_OUT_OUT_LS6 = 53
} enum_av_out;

typedef enum {
	AV_CAL_NA = 0,
	AV_CAL_PENDING = 1,
	AV_CAL_SAVE = 2,
	AV_CAL_DONE = 3
} enum_av_cal;

typedef enum {
	AV_TEST_NA = 0,
	AV_TEST_PENDING = 1,
	AV_TEST_RUN = 2,
	AV_TEST_DONE = 3
} enum_av_test;

typedef enum {
	SW_STATE_OFF = 0,
	SW_STATE_ON = 1
} enum_sw_state;

typedef enum {
	SW_CFG_PULL_MASK = 1,
	SW_CFG_PULL_UP = 1,
	SW_CFG_PULL_OFF = 0,
	SW_CFG_EDGE_MASK = 2,
	SW_CFG_EDGE_FALL = 0,
	SW_CFG_EDGE_RISE = 2
} enum_sw_cfg;

typedef enum {
	SW_DIAG_COMMS_TIMEOUT = -1,
	SW_DIAG_NA = 0,
	SW_DIAG_OK = 1,
	SW_DIAG_HYSTERESIS_MIN = 2,
	SW_DIAG_HYSTERESIS_MAX = 3,
	SW_DIAG_TRIGGER_MIN = 4,
	SW_DIAG_TRIGGER_MAX = 5,
	SW_DIAG_FILTER_MAX = 6,
	SW_DIAG_PULLUP_ON = 7,
	SW_DIAG_PULLUP_OFF = 8,
	SW_DIAG_VOLTAGE_MIN = 9,
	SW_DIAG_VOLTAGE_MAX = 10
} enum_sw_diag;

typedef enum {
	UDIG_CFG_PULL_MASK = 1,
	UDIG_CFG_PULL_UP = 1,
	UDIG_CFG_PULL_OFF = 0,
	UDIG_CFG_EDGE_MASK = 2,
	UDIG_CFG_EDGE_FALL = 0,
	UDIG_CFG_EDGE_RISE = 2
} enum_udig_cfg;

typedef enum {
	UDIG_STATUS_NA = 0,
	UDIG_STATUS_OK = 1,
	UDIG_STATUS_LT = 2,
	UDIG_STATUS_LA = 3,
	UDIG_STATUS_NE = 4,
	UDIG_STATUS_NP = 5,
	UDIG_STATUS_FPGA_FAULT = 6,
	UDIG_STATUS_HYSTERESIS_MIN = 7,
	UDIG_STATUS_HYSTERESIS_MAX = 8,
	UDIG_STATUS_TRIGGER_MIN = 9,
	UDIG_STATUS_TRIGGER_MAX = 10,
	UDIG_STATUS_FILTER_MAX = 11,
	UDIG_STATUS_PULLUP_ON = 12,
	UDIG_STATUS_PULLUP_OFF = 13
} enum_udig_status;

typedef enum {
	INJ_PH_CFG_DRIVE = 3,
	INJ_PH_CFG_SAT = 0,
	INJ_PH_CFG_PH = 1,
	INJ_PH_CFG_EXTPH = 3
} enum_inj_ph_cfg;

typedef enum {
	INJ_PH_STATUS_NA = 0,
	INJ_PH_STATUS_OK = 1,
	INJ_PH_STATUS_SHORT_FAULT = 2,
	INJ_PH_STATUS_OPEN_FAULT = 3,
	INJ_PH_STATUS_NO_PEAK = 4,
	INJ_PH_STATUS_FPGA_FAULT = 5,
	INJ_PH_STATUS_PEAK_INVALID = 6,
	INJ_PH_STATUS_HOLD_INVALID = 7
} enum_inj_ph_status;

typedef enum {
	IGN_LS_CFG_CUT_PATTERN_MASK = 15,
	IGN_LS_CFG_CUT_PATTERN_DEFAULT = 0,
	IGN_LS_CFG_CUT_PATTERN_ALTERNATE = 1,
	IGN_LS_CFG_CUT_PATTERN_RESERVED_1 = 2,
	IGN_LS_CFG_CUT_PATTERN_RESERVED_2 = 3
} enum_ign_ls_cfg;

typedef enum {
	IGN_LS_GROUP_DIAG_NA = 0,
	IGN_LS_GROUP_DIAG_OK = 1,
	IGN_LS_GROUP_DIAG_CHARGE_MIN = 2,
	IGN_LS_GROUP_DIAG_CHARGE_MAX = 3,
	IGN_LS_GROUP_DIAG_LIMIT_HARD = 4,
	IGN_LS_GROUP_DIAG_LIMIT_SOFT = 5,
	IGN_LS_GROUP_DIAG_CUT = 6,
	IGN_LS_GROUP_DIAG_DRIVE_OFF = 7,
	IGN_LS_GROUP_DIAG_IO_ERROR = 8,
	IGN_LS_GROUP_DIAG_CFG_ERROR = 9,
	IGN_LS_GROUP_DIAG_CUT_PATTERN_INVALID = 10,
	IGN_LS_GROUP_DIAG_CHARGE_INVALID = 11,
	IGN_LS_GROUP_DIAG_CHARGE_MIN_INVALID = 12,
	IGN_LS_GROUP_DIAG_CHARGE_MAX_INVALID = 13,
	IGN_LS_GROUP_DIAG_RESTRIKE_CHARGE_INVALID = 14,
	IGN_LS_GROUP_DIAG_CUT_SPEED_INVALID = 15,
	IGN_LS_GROUP_DIAG_CUT_RANGE_INVALID = 16,
	IGN_LS_GROUP_DIAG_CUT_LENGTH_INVALID = 17,
	IGN_LS_GROUP_DIAG_DURATION_INVALID = 18,
	IGN_LS_GROUP_DIAG_IGN_DELAY_INVALID = 19,
	IGN_LS_GROUP_DIAG_DRIVE_INVALID = 20
} enum_ign_ls_group_diag;

typedef enum {
	INJ_D_DIAG_NA = 0,
	INJ_D_DIAG_OK = 1,
	INJ_D_DIAG_SHORT_FAULT = 2,
	INJ_D_DIAG_OPEN_FAULT = 3,
	INJ_D_DIAG_NO_PEAK = 4,
	INJ_D_DIAG_OVERLAP = 5,
	INJ_D_DIAG_FPGA_FAULT = 6,
	INJ_D_DIAG_PEAK_MAX_INVALID = 7,
	INJ_D_DIAG_PEAK_MIN_INVALID = 8,
	INJ_D_DIAG_HOLD_MAX_INVALID = 9,
	INJ_D_DIAG_HOLD_MIN_INVALID = 10
} enum_inj_d_diag;

typedef enum {
	INJ_D_CFG_DRIVE = 1,
	INJ_D_CFG_INDUCTIVE = 0,
	INJ_D_CFG_PIEZO = 1,
	INJ_D_CFG_BOOST = 2
} enum_inj_d_cfg;

typedef enum {
	INJ_D_GROUP_DIAG_NA = 0,
	INJ_D_GROUP_DIAG_OK = 1,
	INJ_D_GROUP_DIAG_SHORT_FAULT = 2,
	INJ_D_GROUP_DIAG_OPEN_FAULT = 3,
	INJ_D_GROUP_DIAG_NO_PEAK = 4,
	INJ_D_GROUP_DIAG_OVERLAP = 5,
	INJ_D_GROUP_DIAG_LIMIT_HARD = 6,
	INJ_D_GROUP_DIAG_LIMIT_SOFT = 7,
	INJ_D_GROUP_DIAG_CUT = 8,
	INJ_D_GROUP_DIAG_HI_TIMER = 9,
	INJ_D_GROUP_DIAG_CUT_SPEED_INVALID = 10,
	INJ_D_GROUP_DIAG_CUT_RANGE_INVALID = 11,
	INJ_D_GROUP_DIAG_CUT_LENGTH_INVALID = 12,
	INJ_D_GROUP_DIAG_IO_ERROR = 13,
	INJ_D_GROUP_DIAG_CFG_ERROR = 14,
	INJ_D_GROUP_DIAG_HW_ERROR = 15,
	INJ_D_GROUP_DIAG_SUPPLY_OFF = 16,
	INJ_D_GROUP_DIAG_SUPPLY_MIN = 17,
	INJ_D_GROUP_DIAG_SUPPLY_MAX = 18,
	INJ_D_GROUP_DIAG_SHORT_TIMER = 19,
	INJ_D_GROUP_DIAG_BOOST_TIMER = 20,
	INJ_D_GROUP_DIAG_PICKUP_TIMER = 21,
	INJ_D_GROUP_DIAG_FLYBACK_TIMER = 22,
	INJ_D_GROUP_DIAG_OPEN_TIMER = 23,
	INJ_D_GROUP_DIAG_BOOST_MODE_TIMER = 24,
	INJ_D_GROUP_DIAG_BOOST_RECIRC_TIMER = 25
} enum_inj_d_group_diag;

typedef enum {
	INJ_PH_GROUP_DIAG_NA = 0,
	INJ_PH_GROUP_DIAG_OK = 1,
	INJ_PH_GROUP_DIAG_SHORT_FAULT = 2,
	INJ_PH_GROUP_DIAG_OPEN_FAULT = 3,
	INJ_PH_GROUP_DIAG_NO_PEAK = 4,
	INJ_PH_GROUP_DIAG_LIMIT_HARD = 6,
	INJ_PH_GROUP_DIAG_LIMIT_SOFT = 7,
	INJ_PH_GROUP_DIAG_CUT = 8,
	INJ_PH_GROUP_DIAG_TIMER_B = 9,
	INJ_PH_GROUP_DIAG_CUT_SPEED_INVALID = 10,
	INJ_PH_GROUP_DIAG_CUT_RANGE_INVALID = 11,
	INJ_PH_GROUP_DIAG_CUT_LENGTH_INVALID = 12,
	INJ_PH_GROUP_DIAG_IO_ERROR = 13,
	INJ_PH_GROUP_DIAG_CFG_ERROR = 14
} enum_inj_ph_group_diag;

typedef enum {
	METHOD_PERIODIC = 2,
	METHOD_REF = 4,
	METHOD_DECODE = 9,
	METHOD_INCDECODE = 12,
	METHOD_SYNC = 16,
	METHOD_EDGE = 22,
	METHOD_ALTREF = 28,
	METHOD_PULSE = 30,
	METHOD_PWM = 64,
	METHOD_PHM = 66,
	METHOD_PORT = 68,
	METHOD_IGN = 72,
	METHOD_BRIDGE = 82,
	METHOD_KNOCK = 84,
	METHOD_INJ_D_TEST = 92,
	METHOD_CAMPUMP = 200,
	METHOD_SLAVE = 204,
	METHOD_ABS = 100,
	METHOD_UDIG_ADC = 104,
	METHOD_RATIO = 108,
	METHOD_AV_TEST = 112,
	METHOD_KNOCK_LEVEL = 116,
	METHOD_AV_SWITCH = 120,
	METHOD_UDIG_IO = 132,
	METHOD_INJ_PH_IO = 136,
	METHOD_IGN_LS_IOGROUP = 140,
	METHOD_INJ_D_IO = 144,
	METHOD_INJ_D_IOGROUP = 148,
} enum_method;

/* prototypes for io method periodic */
extern s32 periodic_cfg(handle_t h, /* enum_periodic_slave*/ s32 periodic_slave, u32 periodic_sample_teeth);
extern s32 periodic_state_get(handle_t h, f32 volatile *periodic_freq, f32 volatile *periodic_pulse, f32 volatile *periodic_duty, /* enum_periodic_diagnostic*/ s32 volatile *periodic_diagnostic, u32 volatile *edge_ticks);

/* prototypes for io method ref */
extern f32 ref_cfg(handle_t h, /* enum_ref_mode*/ s32 ref_mode, u32 tooth_count, f32 ref_speed_max, u32 cylinders);
extern f32 ref_speed(handle_t h, f32 blank_ratio, /* enum_ref_state*/ s32 volatile *ref_state, f32 volatile *cycle_angle, f32 volatile *ref_speed_instantaneous, f32 volatile *tooth_ratio, f32 volatile *tooth_period, s32 volatile *tooth_index);
extern s32 ref_diagnostic(handle_t h, f32 ref_offset, f32 tooth_ratio_hi, f32 tooth_ratio_lo, f32 ref_test_speed);

/* prototypes for io method decode */
extern s32 decode_cfg(handle_t h, /* enum_decode_cfg*/ s32 decode_cfg);
extern s32 decode_update(handle_t h);

/* prototypes for io method incdecode */
extern s32 incdecode_diagnostic_get(handle_t h, f32 incdecode_pulses_per_rev, f32 incdecode_home_low, f32 incdecode_home_high);
extern f32 incdecode_position_get(handle_t h, /* enum_incdecode_mode*/ s32 incdecode_mode, f32 volatile *incdecode_speed, f32 volatile *incdecode_phase);

/* prototypes for io method sync */
extern s32 sync_cfg(handle_t h, /* enum_sync_cfg*/ s32 sync_cfg);
extern f32 cam_angle_get(handle_t h, f32 cam_offset, /* enum_cam_mode*/ s32 cam_mode, s32 volatile *cam_index, u32 volatile *cam_ticks);
extern s32 sync_diagnostic_get(handle_t h, f32 cam_smooth);

/* prototypes for io method edge */
extern u32 edge_ticks(handle_t h);

/* prototypes for io method altref */
extern f32 altref_set(handle_t h, /* enum_altref_mode*/ s32 altref_mode, f32 ref_offset);
extern s32 altref_cfg(handle_t h);

/* prototypes for io method pulse */
extern s32 pulse_get(handle_t h, f32 volatile *angle1, f32 volatile *width1, f32 volatile *angle2, f32 volatile *width2, f32 volatile *angle3, f32 volatile *width3, f32 volatile *angle4, f32 volatile *width4, f32 volatile *angle5, f32 volatile *width5, f32 volatile *angle6, f32 volatile *width6, f32 volatile *angle7, f32 volatile *width7, f32 volatile *angle8, f32 volatile *width8, f32 volatile *angle9, f32 volatile *width9, f32 volatile *angle10, f32 volatile *width10);
extern s32 pulse_cfg(handle_t h, /* enum_pulse_cfg*/ s32 pulse_cfg, f32 pulse_offset);

/* prototypes for io method pwm */
extern s32 pwm_set(handle_t h, f32 freq, f32 duty);

/* prototypes for io method phm */
extern s32 phm_set(handle_t h, f32 freq, f32 phm_duty, f32 phm_delay, f32 phm_peak, f32 phm_width);

/* prototypes for io method port */
extern s32 port_cfg(handle_t h, /* enum_port_cfg*/ s32 port_cfg, f32 port_tdc);
extern s32 port_pulse_set(handle_t h, f32 pulse_width1, f32 pulse_width2, f32 pulse_width3, f32 pulse_width4, f32 pulse_volume);
extern s32 port_cycle_get(handle_t h, f32 pulse_angle1, f32 pulse_angle2, f32 pulse_angle3, f32 pulse_angle4, f32 volatile *cycle_volume, s32 volatile *port_pulse_count);
extern s32 port_status_get(handle_t h, /* enum_port_pin_drive*/ s32 port_pin_drive, f32 limit_angle, f32 off_time, f32 output_delay, f32 volatile *total_volume);

/* prototypes for io method ign */
extern s32 ign_cfg(handle_t h, /* enum_ign_cfg*/ s32 ign_cfg, f32 ign_tdc);
extern s32 ign_timing(handle_t h, f32 timing, /* enum_ign_pin_drive*/ s32 ign_pin_drive);
extern s32 ign_restrike(handle_t h, f32 restrike_angle, u32 restrikes_max);

/* prototypes for io method bridge */
extern s32 bridge_set(handle_t h, f32 b_freq, f32 b_duty);

/* prototypes for io method knock */
extern s32 knock_cfg(handle_t h, f32 window_start);
extern s32 knock_window_set(handle_t h, f32 window_width, f32 knock_freq1, f32 knock_freq2, f32 knock_freq3, f32 knock_freq4);

/* prototypes for io method inj_d_test */
extern s32 inj_d_peak_charge(handle_t h, /* enum_inj_d_test*/ s32 inj_d_test, f32 volatile *inj_d_hold_charge, f32 volatile *inj_d_hold_recirc, f32 volatile *inj_d_peak_charge);
extern f32 peak_a_offset(handle_t h, f32 volatile *peak_b_offset, f32 volatile *hold_a_offset, f32 volatile *hold_b_offset);

/* prototypes for io method campump */
extern s32 campump_cfg(handle_t h, u32 cam_lobe_count, f32 cam_lobe_pitch, /* enum_cam_cfg*/ s32 cam_cfg, f32 pwm_timeout);
extern s32 campump_pulse_set(handle_t h, f32 cp_delivery_angle, f32 cp_limit_angle, f32 peak_pulse, f32 hold_angle);
extern s32 campump_extra_set(handle_t h, f32 hold_freq, f32 hold_duty, /* enum_cp_mode*/ s32 cp_mode, f32 cp_offset, f32 cp_off_delay);

/* prototypes for io method slave */
extern s32 slave_cfg(handle_t h, f32 slave_timeout);
extern s32 slave_set(handle_t h, f32 slave_peak_pulse, f32 slave_hold_freq, f32 slave_hold_duty, /* enum_slave_mode*/ s32 slave_mode, s32 volatile *timeout_count);

/* prototypes for io method abs */
extern s32 abs_cfg(handle_t h, f32 ain_filter_tc);
extern f32 abs_volts_filt_get(handle_t h, f32 volatile *volts);

/* prototypes for io method udig_adc */
extern f32 udig_volts_get(handle_t h);
extern f32 udig_volts_min_get(handle_t h, f32 volatile *volts_max);

/* prototypes for io method ratio */
extern s32 ratio_cfg(handle_t h, f32 ain_filter_tc);
extern f32 ratio_norm_filt_get(handle_t h, /* enum_ratio_ref*/ u32 ratio_ref, f32 volatile *volts);

/* prototypes for io method av_test */
extern s32 av_cfg(handle_t h, f32 ain_filter_tc);
extern f32 av_get(handle_t h, f32 volatile *volts);
extern s32 av_cal(handle_t h, f32 gain, f32 offset, /* enum_av_cal*/ s32 av_cal);
extern s32 av_test(handle_t h, /* enum_av_out*/ u32 av_out, /* enum_av_test*/ s32 av_test, f32 volatile *av_min, f32 volatile *av_max, f32 volatile *av_rise);

/* prototypes for io method knock_level */
extern s32 knock_level_cfg(handle_t h, f32 knock_tdc);
extern f32 knock_level_get(handle_t h, f32 knock_gain, f32 volatile *knock_level1, f32 volatile *knock_level2, f32 volatile *knock_level3, f32 volatile *knock_level4, s32 volatile *knock_cycle);

/* prototypes for io method av_switch */
extern s32 switch_cfg(handle_t h, /* enum_sw_cfg*/ s32 sw_cfg);
extern s32 switch_diag(handle_t h, f32 sw_trigger, f32 sw_hysteresis, f32 sw_filter);
extern s32 switch_update(handle_t h, f32 volatile *sw_volts);

/* prototypes for io method core */
extern handle_t reserve(enum_io core, /* enum_method*/ s32 method);
extern s32 release(handle_t h, /* enum_method*/ s32 method);

/* prototypes for io method UDIG_IO */
extern s32 udig_cfg(handle_t h, /* enum_udig_cfg*/ s32 udig_cfg);
extern s32 udig_update(handle_t h, f32 trigger, f32 hysteresis, f32 filter);

/* prototypes for io method INJ_PH_IO */
extern s32 inj_ph_cfg(handle_t h, /* enum_inj_ph_cfg*/ s32 inj_ph_cfg);
extern s32 inj_ph_update(handle_t h, f32 peak, f32 hold);

/* prototypes for io method IGN_LS_IOGROUP */
extern s32 ign_ls_group_cfg(handle_t h, f32 ign_delay, f32 duration, u32 cut_length);
extern s32 ign_ls_charge_set(handle_t h, f32 charge, f32 charge_min, f32 charge_max, f32 restrike_charge, f32 ign_drive);
extern f32 ign_ls_cut_set(handle_t h, f32 cut_speed, f32 cut_request, f32 cut_range, /* enum_ign_ls_cfg*/ u32 ign_ls_cfg, s32 volatile *cut_count);

/* prototypes for io method INJ_D_IO */
extern s32 inj_d_update(handle_t h, f32 peak_max, f32 peak_min, f32 hold_max, f32 hold_min);

/* prototypes for io method INJ_D_IOGROUP */
extern s32 inj_d_group_cfg(handle_t h, /* enum_inj_d_cfg*/ s32 inj_d_cfg, f32 short_timer);
extern f32 inj_d_cut_set(handle_t h, f32 cut_speed, f32 cut_request, f32 cut_range, u32 cut_length, s32 volatile *cut_count);
extern s32 inj_d_supply_set(handle_t h, f32 d_supply, f32 hi_timer, f32 boost_timer, f32 pickup_timer, f32 flyback_timer);
extern s32 inj_d_boost_set(handle_t h, f32 short_timer, f32 open_timer, f32 boost_mode_timer, f32 boost_recirc_timer);
